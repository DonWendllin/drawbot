name: DrawBot App Builder

# an other trigger is needed...
# there are double releases
# cause github seems to make a release for each tag
# on:
#   push:
#     tags:
#       - "*"
on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  build:

    runs-on: macos-latest

    steps:
    - name: Set up Python 3.7
      run: |
        curl https://www.python.org/ftp/python/3.7.6/python-3.7.6-macosx10.9.pkg --output pythonInstaller.pkg
        sudo installer -pkg pythonInstaller.pkg -target /
    - name: Check python
      run: |
        python3 --version
        python3 -c "import platform; print('macOS version:', platform.mac_ver()[0])"
    - name: Install Certificates
      run: |
        KEY_CHAIN=drawBotBuild.keychain
        CERTIFICATE_DEVELOPER_ID_APPLICATION=certificate.cer
        CERTIFICATE_DEVELOPER_ID_INSTALLER=certificate.cer

        echo $DEVELOPER_ID_APPLICATION | base64 --decode > $CERTIFICATE_DEVELOPER_ID_APPLICATION
        echo $DEVELOPER_ID_INSTALLER | base64 --decode > $CERTIFICATE_DEVELOPER_ID_INSTALLER

        security create-keychain -p $KEYCHAIN_PASSWORD $KEY_CHAIN
        security default-keychain -s $KEY_CHAIN
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEY_CHAIN

        security import $CERTIFICATE_DEVELOPER_ID_APPLICATION -k $KEY_CHAIN -P $CERTIFICATE_PASSWORD  -T /usr/bin/codesign
        security import $CERTIFICATE_DEVELOPER_ID_INSTALLER -k $KEY_CHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign

        security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASSWORD $KEY_CHAIN

        rm -fr *.cer
    - name: Checkout
      uses: actions/checkout@v1
    - name: Install dependencies
      run: |
        python3 -m pip install -r ./requirements.txt
        python3 -m pip install .
    # - name: Run tests
    #   run: python3 ./tests/runAllTests.py
    - name: Build app
      # if: success()
      run: |
        python3 setupApp.py py2app --dmg --codesign "$CODESIGN_NAME" --notarizedeveloper "$NOTARIZE_DEVELOPER" --notarizePassword "$NOTARIZE_PASSWORD"
    - name: Create Release
      # if: success()
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false
        body: |
          !!!Edit the Release note!!!
    - name: Upload Release Asset
      # if: success()
      id: upload-release-asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./dist/DrawBot.dmg
        asset_name: DrawBot.dmg
        asset_content_type: application/dmg

